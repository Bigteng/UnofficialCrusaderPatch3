name: Build

on: [push]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: .

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  BUILD_CONFIGURATION: Release

jobs:
  build:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Add NuGet source
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        UCP3_READ_PACKAGES: ${{ secrets.UCP3_READ_PACKAGES }}
      run: nuget sources add -Name "gynt-packages" -Source "https://nuget.pkg.github.com/gynt/index.json" -StorePasswordInClearText -Username git -Password "$env:UCP3_READ_PACKAGES"

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # run: msbuild /t:restore /p:Configuration=${{env.BUILD_CONFIGURATION}}
      run: nuget restore

    - name: Build UCP3
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} ${{env.SOLUTION_FILE_PATH}}
      
    - name: Prepare UCP3 package
      shell: pwsh
      run: |
        # Create the right folders
        mkdir ucp-package
        mkdir ucp-package\ucp
        
        # Copy the dll files, rename dll.dll to binkw32_ucp.dll
        $dllfiles = Get-ChildItem $env:BUILD_CONFIGURATION\*.dll
        Copy-Item $dllfiles -Destination ucp-package\ -Recurse
        Rename-Item -Path ucp-package\dll.dll -NewName "binkw32_ucp.dll"
        
        # Copy the bat file that renames binkw32_ucp.dll to binkw32.dll and backs up binkw32.dll to binkw32_real.dll (if necessary)
        Copy-Item installer\rename-dlls.bat ucp-package\install.bat
        
        # Copy all content/ucp files ucp-package/ucp, except the modules folder
        $mainfiles = Get-ChildItem content\ucp | Where({$_.Name -ne "modules"})  | foreach{$_.FullName}
        Copy-Item $mainfiles -Destination ucp-package\ucp -Recurse
        
        ### Build each module if required, and then package the module by copying the right files
        # List of modules
        $modules = Get-ChildItem -Directory content\ucp\modules
        foreach($module in $modules) {
          
          # Create the module directory in the ucp-package\ucp\modules folder
          New-Item -Path "ucp-package\ucp\modules\" -Name $module.Name -ItemType "directory"
          $moduleDir = "ucp-package\ucp\modules\" + $module.Name + "\"
          
          # If the module uses C++ we have to build it first
          $hasVCXProj = Test-Path -Path ($module.FullName + "\*.vcxproj")
          
          # If the module specifies a custom list of files to include, read that
          $hasFilesList = Test-Path -Path ($module.FullName + "\module.files")
          
          # Build the module
          if($hasVCXProj) {
            pushd $module.FullName
            nuget restore
            msbuild /m /p:Configuration=$env:BUILD_CONFIGURATION
            popd
          }
          
          # Copy the specified files, or *.lua and module.yml if no module.files file was found.
          if($hasFilesList) {
            $node = Select-Xml -XPath "/module/files" -Path ($module.FullName + "\module.files")
            $moduleFiles = $node.Node.file
            foreach($moduleFile in $moduleFiles) {
              # To allow specification of $(Configuration) in "src" in module.files, we substitute it with the right value here
              $srcFile = $moduleFile.src.Replace("`$(Configuration)", "$env:BUILD_CONFIGURATION")
              
              # Copy the file, can include wildcards
              Copy-Item ($module.FullName + "\" + $srcFile) -Destination $moduleDir -Recurse
            }
          } else {
            Copy-Item ($module.FullName + "\*.lua") -Destination $moduleDir -Recurse
            Copy-Item ($module.FullName + "\module.yml") -Destination $moduleDir -Recurse
          }
        }
    - name: Generate a snapshot UCP3 artifact name
      shell: pwsh
      run: |
        $name = "$env:GITHUB_SHA".SubString(0, 10)
        echo $name
        echo "NAME=$name" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
    - name: Upload UCP3 as an artifact
      uses: actions/upload-artifact@v2
      with:
        name: UCP3-snapshot-${{ env.NAME }}
        path: ucp-package/*
